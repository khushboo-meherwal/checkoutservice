# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

name : Docker-CI
trigger:
  branches:
    include:
      - master
 
pool:
  vmImage: 'ubuntu-latest'
 
variables:
  ImageName: '173129/checkoutserviice:$(Build.BuildId)'


stages:
- stage: Sonar
  jobs:
  - job: Sonar
    steps:
     
    - task: SonarQubePrepare@4
      inputs:
        SonarQube: 'sonarqube'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'checkoutservice'
        cliProjectName: 'checkoutservice'
        cliSources: 'src'
    
    
  #  - task: SonarQubeAnalyze@4
  #    displayName: 'Run SonarQube Scan'

    - task: SonarQubePublish@4
      inputs:
        pollingTimeoutSec: '300'

- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build and push Docker image
    steps:
    - task: Docker@1
      displayName: 'Build the Docker image'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Hub'
        command: 'Build an image'
        dockerFile: '**/Dockerfile'
        imageName: '$(ImageName)'
        includeLatestTag: true
        useDefaultContext: false
        buildContext: '.'

- stage: Imagepush
  displayName: Image push
  jobs:  
  - job: Pushing
    displayName: Push Docker image
    steps:     
    - task: Docker@1
      displayName: 'Push the Docker image to Dockerhub'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Hub'
        command: 'Push an image'
        imageName: '$(ImageName)'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- stage: Deploy
  displayName: Deploy
  jobs:  
  - job: Deploy
    displayName: Deploy
    steps:
    - task: KubectlInstaller@0
      inputs:
        kubectlVersion: 'latest'

    
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'sed -i ''s#containerImage#$(ImageName)#g'' checkoutservice.yaml'
    
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'kubernetes'
        namespace: 'khushboo'
        command: 'apply'
        useConfigurationFile: true
        configuration: 'checkoutservice.yaml'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
 
    
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        mergeTestResults: true
        testRunTitle: 'checkoutservice'